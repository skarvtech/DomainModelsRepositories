// --------------------------------------------------------------------------
//
//  Copyright (C) 2018 Servicerobotik Ulm
//
//  Service Robotics Research Center
//  University of Applied Sciences Ulm
//  Prittwitzstr. 10
//  89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------
#import CommBasicObjects.*;

CommObjectsRepository CommLocalizationObjects version 1.0.0 {

	CommObject CommViewpointLocations {
		database: ViewpointLocation[*]
	}
	Enumeration BearingOnlySLAMTag{
		LANDMARKCOUNT
	}
	CommObject ViewpointLocation {
		id: Int32
		mean: CPose2D
		cov: CMatrixDouble22
		invCov: CMatrixDouble22
		observationCount: Int32
		possibleObservations: Int32
	}
	CommObject CPose2D {
		m_phi: Double
		m_is3D: Boolean
		m_x: Double
		m_y: Double
		m_z: Double
	}
	CommObject CMatrixDouble22 {
		m_00: Double
		m_01: Double
		m_10: Double
		m_11: Double
	}
	
	Enumeration LocalizationEventType {
		LOCALIZATION_UNKNOWN
		LOCALIZATION_LOST
		LOCALIZATION_OK
	}
	
	CommObject CommLocalizationEventParameter {
		oldState : LocalizationEventType
	}
	
	CommObject CommLocalizationEventResult {
		state : LocalizationEventType
	}
	
	CommObject LocalizationEventState {
		newState : LocalizationEventType
	}



	/** Communication object to read a gps device. Inspired by struct gps_fix_t from libgps */
	CommObject CommGpsFix {
		/** Timestamp as received from GPS device in unix format + fractional part */
		gps_timestamp : Double
		
		/** Values for latitude and longitude are valid. */
		is_2D : Boolean
		
		/** Values for latitude, longitude and elevation are valid. */
		is_3D : Boolean
		
		/** Number of visible satellites */
		satellites_visible : Int32
		
		/** Number of satellites that were used for calculating the position */
		satellites_used : Int32
		
		/** Latitude. Only valid if is_2D = true */
		latitude : Double
		
		/** Longitude. Only valid if is_2D = true */
		longitude : Double
		
		/** Altitude [meters]. Only valid if is_3D = [true] */
		altitude : Double
		
		/** Speed over ground. [meters/second] */
		speed : Double
		
		/** Vertical speed. [meters/second] */
		climb : Double

		/** Uncertainty of the corresponding element. 95% confidence. [meters] */
		latitude_uncertainty : Double
		
		/** Uncertainty of the corresponding element. 95% confidence. [meters] */
		longitude_uncertainty : Double
		
		/** Uncertainty of the corresponding element. 95% confidence. [meters] */
		altitude_uncertainty : Double
		
		/** Uncertainty of the corresponding element. 95% confidence. [meters] */
		speed_uncertainty : Double
		
		/** Uncertainty of the corresponding element. 95% confidence. [meters] */
		climb_uncertainty : Double
	}

	CommObject CommAmclParticle{
	pose: CommPose3d
	weight: Double = 0.0
	}

	CommObject CommAmclHypothesis{
	pose: CommPose3d
	weight: Double = 0.0
	covMatrix: Double[9] = [0.0]
	}

	CommObject CommAmclVisualizationInfo{
	particles: CommAmclParticle[*]
	hypotheses: CommAmclHypothesis[*]
	}
}
