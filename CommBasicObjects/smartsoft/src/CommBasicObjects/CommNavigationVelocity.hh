//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Basic Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  (partly based on work by Christian Schlegel and Pablo d'Angelo)
//
// --------------------------------------------------------------------------


#ifndef COMMBASICOBJECTS_COMMNAVIGATIONVELOCITY_H_
#define COMMBASICOBJECTS_COMMNAVIGATIONVELOCITY_H_

#include "CommBasicObjects/CommNavigationVelocityCore.hh"

namespace CommBasicObjects {
		
class CommNavigationVelocity : public CommNavigationVelocityCore {
	public:
		// default constructors
		CommNavigationVelocity();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// CommNavigationVelocity(const double &vX = 0.0, const double &vY = 0.0, const double &omega = 0.0, const unsigned long int &updateCount = 0);
		
		CommNavigationVelocity(const CommNavigationVelocityCore &commNavigationVelocity);
		CommNavigationVelocity(const DATATYPE &commNavigationVelocity);
		virtual ~CommNavigationVelocity();
		
		// use framework specific getter and setter methods from core (base) class
		using CommNavigationVelocityCore::get;
		using CommNavigationVelocityCore::set;
		
		//
		// feel free to add customized methods here
		//
		/**
		Get the translation velocity in units of \a unit meters per second.
		Default unit is millimeters per second.
		*/
		inline double get_vX(const double unit = 0.001) const { return getVX() * (0.001 / unit); }

		inline double get_vY(const double unit = 0.001) const { return getVY() * (0.001 / unit); }

		inline double get_vZ(const double unit = 0.001) const { return getVZ() * (0.001 / unit); }

		/**
		Get the angular velocity in radians per second.
		*/
		inline double get_omega() const { return getOmega(); }

		//
		// SET
		//

		/**
		Set the translation velocity in units of \a unit meters per second.
		Default unit is millimeters per second.
		*/
		inline void set_vX(double v, const double unit = 0.001) { setVX( v * (1000 * unit) ); }
		inline void set_vY(double v, const double unit = 0.001) { setVY( v * (1000 * unit) ); }
		inline void set_vZ(double v, const double unit = 0.001) { setVZ( v * (1000 * unit) ); }

		/**
		Set the angular velocity of the base in radians per second.
		*/
		inline void set_omega(double omega) { setOmega( omega ); }
};

inline std::ostream &operator<<(std::ostream &os, const CommNavigationVelocity &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace CommBasicObjects */
#endif /* COMMBASICOBJECTS_COMMNAVIGATIONVELOCITY_H_ */
