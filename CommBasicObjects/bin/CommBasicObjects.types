// --------------------------------------------------------------------------
//
//  Copyright (C) 2018 Servicerobotik Ulm
//
//  Service Robotics Research Center
//  University of Applied Sciences Ulm
//  Prittwitzstr. 10
//  89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

CommObjectsRepository CommBasicObjects version 1.0.0 {
	CommObject CommVoid {
		dummy: Int32
	}
	CommObject CommBool {
		boolValue: Boolean
	}
	CommObject CommTimeStamp {
		sec: UInt32 = 0
		usec: UInt32 = 0
	}
	CommObject CommPosition3d {
		x: Double = 0.0
		y: Double = 0.0
		z: Double = 0.0
	}
	CommObject CommOrientation3d {
		azimuth: Double = .0
		elevation: Double = .0
		roll: Double = .0
	}
	CommObject CommPose3d {
		position: CommPosition3d
		orientation: CommOrientation3d
	}
	CommObject CommDirection3d {
		azimuth: Double = 0.0
		elevation: Double = 0.0
	}
	CommObject CommDevicePoseState {
		stateBase: CommBaseState
		devicePose: CommPose3d
	}
	CommObject CommBaseState {
		timeStamp: CommTimeStamp
		basePose: CommBasePose
		baseOdomPose: CommBasePose
		baseVelocity: CommBaseVelocity
		baseOdomVelocity: CommBaseVelocity
		batteryState: CommBatteryLevel
		baseBumperState : CommBumperState
	}
	CommObject CommBasePose {
		covInvalid: Boolean
		covMatrix: Double[9] = [0.0]
		updateCount: UInt32
		pose3D: CommPose3d
		timeStamp: CommTimeStamp
	}
	CommObject CommBaseVelocity {
		vX: Double = .0
		vY: Double = .0
		vZ: Double = .0
		wX: Double = .0
		wY: Double = .0
		wZ: Double = .0
		timeStamp: CommTimeStamp
	}
	CommObject CommNavigationVelocity {
		vX: Double = .0
		vY: Double = .0
		vZ: Double = .0
		omega: Double = .0
	}
	CommObject CommBatteryLevel {
		potential: Double = .0
		chargeLevel: Int32 = 0
		lifeTime: CommTimeStamp
		timeStamp: CommTimeStamp
		current: Double = .0
		externalPower: Boolean = false
	}
	
	CommObject CommBasePositionUpdate {
		timeStamp: CommTimeStamp
		pose: CommBasePose
		correctedPose: CommBasePose
		velocity: CommBaseVelocity
		correctedVelocity: CommBaseVelocity
	}
	Enumeration RobotComponentEnum {
		ROBOT_BASE_COMPONENT
		ROBOT_STEER_COMPONENT
		ROBOT_TURRET_COMPONENT
	}
	
	
	CommObject CommBumperState {
		bumperState : BumperStateType = BUMPER_NOT_SUPPORTED
	}
	
	Enumeration BumperStateType {
		BUMPER_NOT_SUPPORTED
		BUMPER_NOT_PRESSED
		BUMPER_PRESSED
	}

	Enumeration BumperEventType {
		BUMPER_UNKNOWN
		BUMPER_NOT_PRESSED
		BUMPER_PRESSED
	}
	CommObject CommBumperEventParameter {
		oldState: BumperEventType
	}	
	CommObject CommBumperEventResult {
		state: BumperEventType
	}
	CommObject CommBumperEventState {
		newState: BumperEventType
	}
	
	CommObject CommBatteryParameter {
		upperThreshold: Double = .0
		lowerThreshold: Double = .0
		desiredState: ComparisonState
		currentState: ComparisonState
	}
	Enumeration ComparisonState {
		UNKNOWN
		GREATER
		LOWER
		INBETWEEN
	}
	CommObject CommBatteryState {
		chargeValue: Double = .0
	}
	CommObject CommBatteryEvent {
		chargeValue: Double = .0
		state: ComparisonState
	}
	CommObject CommMobileLaserScan {
		base_state: CommBaseState
		laser_scan_pose: LaserScan6DPose
		laser_world_pose: CommPose3d
	}
	CommObject CommLaserScan {
		is_valid: Boolean = false
		time: CommTimeStamp
		update_count: UInt64 = 0
		start_angle: Double = 27000.0 // -90 deg
		resolution: Double = 50.0 // 0.5 deg
		distance_min: UInt16 = 65535 // 2^16-1 (maximum value for a short type
		distance_max: UInt16 = 0
		length_unit: UInt16 = 1
		scan_points: LaserScanPoint[*]
		max_scan_points: UInt16
	}
	CommObject LaserScanPoint {
		index: UInt16 = 0
		distance: UInt16 = 0
		intensity: UInt8 = 0
	}
	CommObject LaserScan6DPose {
		laser_scan: CommLaserScan
		sensor_pose: CommPose3d
	}
	
	CommObject CommPropertySet {
		sets: PropertySetEntry[*]
		items: PropertyItemEntry[*]
	}
	CommObject PropertySetEntry {
		key: String
		parent: UInt32
	}
	CommObject PropertyItemEntry {
		key: String
		value: String
		parent: UInt32
	}
	
	CommObject CommTCLMessage {
		lisp: String
	}
	
	CommObject CommJoystick {
		xpos: Int16 = 0
		ypos: Int16 = 0
		x2pos: Int16 = 0
		y2pos: Int16 = 0
		buttons: UInt16 = 0
	}
	
	CommObject CommIMUData {
		timestamp: UInt16 = 0
		temperature: Double = .0
		accelerometer_x: Double = .0
		accelerometer_y: Double = .0
		accelerometer_z: Double = .0
		gyroscope_x: Double = .0
		gyroscope_y: Double = .0
		gyroscope_z: Double = .0
		magnetometer_x: Double = .0
		magnetometer_y: Double = .0
		magnetometer_z: Double = .0
		roll: Double = .0
		pitch: Double = .0
		yaw: Double = .0
	}
	
	CommObject CommMobileIRScan {
		is_valid: Boolean = false
		baseState: CommBaseState
		irScan: CommIRScan
	}
	CommObject CommIRScan {
		distance_min: Double = 0.04
		distance_max: Double = 0.40
		poses3D: CommPose3d[*]
		distances: Double[*]
		timeStamp: CommTimeStamp
		/** all IR raw readings as they are! */
		raw_readings: Double[*]
	}
	
	CommObject CommMobileUltrasonicScan {
		baseState: CommBaseState
		usScan: CommUltrasonicScan
	}
	CommObject CommUltrasonicScan {
		timeStamp: CommTimeStamp
		scanPoints: CommPose3d[*]
		intensities: Double[*]
	}
	
	CommObject CommLaserSafetyField {
	    protectiveState : SafetyFieldState
		warningState : SafetyFieldState
	}
	
	CommObject CommLaserSafetyEventState {
		protectiveState : SafetyFieldState
		warningState : SafetyFieldState
		
	}
	
	CommObject CommLaserSafetyEventParam {
		protectiveState : SafetyFieldState
		warningState : SafetyFieldState
	}
	
	
	Enumeration SafetyFieldState {
		FREE
		BLOCKED
		UNKNOWN
	}
	
	Enumeration BaseTagType {
		SIGNAL_STATE_IDLE
		SIGNAL_STATE_ERROR
		SIGNAL_STATE_BUSY
		SIGNAL_STATE_LOCALIZATION_ERROR
		SIGNAL_STATE_SAFETY_FIELD
	}
	
	CommObject CommDataFile {
		filename : String
		filesize : UInt32
		timestamp : CommTimeStamp
		data : Int8[*]
		valid : Boolean
	}
	
	Enumeration FileType {
		FILE_REGULAR
		FILE_DIRECTORY
	}
	
	CommObject CommFileMetaData {
		filename : String
		filesize : UInt32
		filetype :  FileType
	} 
	
	CommObject CommDataFiles {
		fileMetaData : CommFileMetaData[*]
		timestamp : CommTimeStamp
		datastream : Int8[*]
		commpression : Boolean = false
		baseFileName : String
		isSingleFile : Boolean
		valid : Boolean
	}
	
	CommObject CommFileReadRequest {
		filename : String
		compressFile : Boolean = false
	}
	
	CommObject CommFileReadAnswer {
		success : Boolean
		file : CommDataFiles
	}
	
	CommObject CommFileWriteRequest {
		file : CommDataFiles
		filename : String 
	}
	
	CommObject CommFileWriteAnswer {
		success : Boolean
	}
	
	Enumeration FileMoverEventType{
		TYPE_FILE_UNKNOWN
		TYPE_FILE_SUCCESS
		TYPE_FILE_ERROR
	}
	
	CommObject CommFileMoverEventResult {
		state : FileMoverEventType
	}
	
	CommObject CommFileMoverEventParameter {
		oldState: FileMoverEventType
	}	

	CommObject CommFileMoverEventState {
		newState: FileMoverEventType
	}
	
	CommObject CommKBEventResult{
		result : String
		formatedResult : String
	}
	
	CommObject CommKBEventParam{
		query : String
		latestState : String
		formatingClause :String
	}
	
	CommObject CommKBRequest {
		request : String
	}
	
	CommObject CommKBResponse {
		response : String
	}
	
	CommObject CommSkillMsg {
		msg : String
	}
	
	CommObject CommTrafficLights {
		red: Boolean
		yellow: Boolean
		green: Boolean
	}
}
