// --------------------------------------------------------------------------
//
//  Copyright (C) 2013 Matthias Lutz
//
//        schlegel@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------
#import CommBasicObjects.*;

CommObjectsRepository CommRobotinoObjects version 1.0.0 {
	
	Enumeration RobotinoDockingEventType 
	{
		DOCKING_UNKNOWN
		IR_DOCKING_DONE
		LASER_DOCKING_DONE
		IR_DOCKING_NOT_DONE
		LASER_DOCKING_NOT_DONE
		LASER_DOCKING_ERROR
		IR_DOCKING_ERROR
		UN_DOCKING_NOT_DONE
		UN_DOCKING_DONE
		UN_DOCKING_ERROR
	}
	
	Enumeration RobotinoConveyerBeltEventType 
	{
		CONVEYER_BELT_UNKNOWN
		CONVEYER_BELT_LOAD_DONE
		CONVEYER_BELT_UNLOAD_DONE
		CONVEYER_BELT_LOAD_NOT_DONE
		CONVEYER_BELT_UNLOAD_NOT_DONE
		CONVEYER_BELT_UNLOAD_ERROR_NO_BOX
		CONVEYER_BELT_UNLOAD_ERROR_BOX_STILL_PRESENT
		CONVEYER_BELT_UNLOAD_ERROR_NO_RESPONSE_FROM_STATION
		CONVEYER_BELT_LOAD_ERROR_NO_BOX_LOADED
		CONVEYER_BELT_LOAD_ERROR_BOX_ADREADY_PRSESENT
		CONVEYER_BELT_LOAD_ERROR_NO_RESPONSE_FROM_STATION
	}
	
	CommObject CommRobotinoDockingEventParameter {
		oldState : RobotinoDockingEventType
	}
	
	CommObject CommRobotinoDockingEventResult {
		state : RobotinoDockingEventType
	}
	
	
	CommObject RobotinoDockingEventState {
		newState : RobotinoDockingEventType
	}
	
	CommObject CommRobotinoConveyerBeltEventParameter {
		oldState : RobotinoConveyerBeltEventType
	}
	
	CommObject CommRobotinoConveyerBeltEventResult {
		state : RobotinoConveyerBeltEventType
	}
	
	CommObject RobotinoConveyerBeltEventState {
		newState : RobotinoConveyerBeltEventType
	}
	
	CommObject CommAnalogOutputRequest {
		outputNumber : UInt32
		outputValue : Double
	}
	
	CommObject CommDigitalOutputRequest {
		outputNumber : UInt32
		outputValue : Boolean
	}
	
	CommObject CommRobotinoPowerOutputValue {
		value : Float
	}
	
	CommObject CommRobotinoIOValues {
		analogInputValues : Float [*]
		digitalInputValues : Boolean [*]
		analogOutputValues : CommAnalogOutputRequest [*]
		digitalOutputValues : CommDigitalOutputRequest [*]
	}
	
	CommObject CommDigitalInputEventResult {
		digitalInputValues : Boolean [*]
	}
	
	CommObject CommDigitalInputEventState {
		digitalInputValues : Boolean [*]
	}
	
	CommObject CommDigitalInputEventParameter {
		digitalInputValuesNumber : UInt32
		digitalInputValue : Boolean
	}
	
	CommObject JobEventState {
		robotTarget: String
		job: CommTCLMessage
	}
	
	Enumeration NavigationNodeRequestType{
		FREENODE
		ACQUIRENODE
		FREEALLNODES
		FREEALLNODESBUT
	}
	
	CommObject CommPathNavigationNodeRequest {
		requestType : NavigationNodeRequestType
		nodesList :  CommPathNode [*]
		robotID : String
	}
	
	CommObject CommPathNavigationNodeAnswer {
		nodesList : CommPathNode [*] 
		success : Boolean
	}
	
	CommObject CommPathNavigationNodePathRequest {
		startPose : UInt32
		goalPose : UInt32
	}

    CommObject CommPathNavigationNodePathAnswer {
    	valid : Boolean
		paths : CommNavigationPaths
	}
	
	
	CommObject CommPathNavigationPoseRequest {
		requesttype : NavigationNodeRequestType
		pose : UInt32
		robotID : String
	}
	
	Enumeration NodeRequestAnserType {
		STATE_UNKNOWN
		SUCCESS
		FAIL
		ERROR_NONODE
	}
	 
	CommObject CommPathNavigationPoseAnswer {
		result : NodeRequestAnserType
	}
	
	CommObject CommPathNavigationPoseRequestEventParameter {
		oldState: NodeRequestAnserType
	}
	CommObject CommPathNavigationPoseRequestEventResult {
		state: NodeRequestAnserType
	}
	CommObject CommPathNavigationPoseRequestEventState {
		newState: NodeRequestAnserType
	}	
	
	/////////////////////////////////////
	// Network Status
	
	CommObject CommPathNode {
		id : UInt32
		x : Double
		y : Double
		pose : UInt32
        path : UInt32
        width : Double	
    	type : NODE_TYPE
     	sts : NODE_STATUS
     	robotID : String
	}

	CommObject CommPathNetworkStatus{
		nodes : CommPathNode [*]
	}
	
	CommObject CommNavigationPaths{
		nodes : CommPathNode [*]
		pathWidth : Double [*]
		robotID : String
	}
	
	Enumeration NODE_TYPE {
		NORMAL
		CROSS
		WAIT
		NEWCROSS
	}
	
	Enumeration NODE_STATUS {
		OCCUPIED
		AVAILABLE
		OK
	}
	// ///////////////////////////////////
	
	// ///////////////////////////////////
	// Network Graph
	
	CommObject CommNavigationGraphVertex {
		x : Double
		y : Double
		pose : Int32
		path : Int32
		width : Double
		type : NODE_TYPE
		intersec_path: Int32 [*]
	}
	
	Enumeration EDGE_TYPE {
		NORMAL_EDGE
		DELETE_EDGE 
	}
	
	CommObject CommNavigationGraphEdge{
		u : Int32
		v : Int32
		
		path : Int32
		way : Int32
		gap : Double
		type : EDGE_TYPE
	}
	
	CommObject CommNavigationGraph {
		vertices : CommNavigationGraphVertex [*]
		edges : CommNavigationGraphEdge [*]
		pathWidth: Double [*]
		valid : Boolean = false
	}
	
	/////////////////////////////////////
	
	Enumeration PathNavigationEventType {
		GOAL_UNKNOWN
		START_TOO_FAR
		GOAL_REACHED
		GOAL_NOT_REACHED
		NO_PATH_FOUND
		FATAL_ERROR
	}
	
	CommObject CommPathNavigationEventParameter {
		oldState: PathNavigationEventType
	}
	CommObject CommPathNavigationEventResult {
		state: PathNavigationEventType
		nextGoal: CommPosition3d
	}
	CommObject PathNavigationEventState {
		newState: PathNavigationEventType
		nextGoal: CommPosition3d
	}
	
	CommObject CommPathNavigationGoal {
		goalID : Int32
		paths : CommNavigationPaths
		goalX: Double
		goalY: Double
		goal_id :Int32
		startX:Double
		startY:Double
		start_id:Int32
	}
	
	CommObject CommPathFreeArea{
		areaID : Int32
		maxOccupancy : Int32
		robotIDs : Int32 [*]
		nodeXvector : Double [*]
		nodeYvector : Double [*]
	}
	
	Enumeration CoordinatedNavigationResourceRequestActionType {
		UNKOWN
		FREE
		ACQUIRE
	}
	
	Enumeration CoordinatedNavigationResourceResponseActionType {
		UNKOWN
		SUCCESS
		FAILED
	}
	
	Enumeration CoordinatedNavigationResourceStateType {
		UNKOWN
		FREE
		BLOCKED
	}
	
	CommObject CommCoordinatedNavigationResourceRequest {
		resourceID :  Int32
		robotID : Int32
		actionType : CoordinatedNavigationResourceRequestActionType = UNKOWN
	}
	
	CommObject CommCoordinatedNavigationResourceState {
		resourceID : Int32
		robotID : Int32
		state : CoordinatedNavigationResourceStateType = UNKOWN 
		remainingCapacity : Int32 = 0
	}
	
	CommObject CommCoordinatedNavigationResourceResponse {
		resourceID :  Int32
		reservedSuccess : CoordinatedNavigationResourceResponseActionType = UNKOWN
		remainingCapacity : Int32 = 0
	}
	
	CommObject CommCoordinatedNavigationDataRequest {
		resourceID :  Int32
		
	}
	
	CommObject CommCoordinatedNavigationDataResponse{
		isValid : Boolean
		area : CommPathFreeArea
	}

	CommObject CommPathNetworkLayout {
		networkStatus : CommPathNetworkStatus
		layoutFile: CommDataFile
	}
	
	Enumeration RemoteOperatorEventType{
		SUCCESS
		FAILED
		INVOKE
	}
	
	CommObject CommRemoteOperatorEvent {
		state : RemoteOperatorEventType
	}
	
	CommObject CommLicenseKey {
		key : String
		valid : Boolean
		timestamp : CommTimeStamp
	}
	
	CommObject CommPlannerGoalList {
		id: Int32
		flag: Int32
		goalXvector : Double [*]
		goalYvector : Double [*]
		nodeObstacleVector : Double [*]
		finalGoalX : Double
		finalGoalY : Double
	}
	
	CommObject CommNavigationTimeRequest {
		startPose : UInt32
		goalPose : UInt32
	}
	
	CommObject CommNavigationTimeResponse {
		estimatedDuration : CommTimeStamp
	}
	
	CommObject CommClosestNodeRequest {
		position : CommPosition3d
	}
	
	CommObject CommClosestNodeAnswer {
		node_id : Int32
		position : CommPosition3d
		distance : Double
		valid : Boolean = false
	}
	
	///////// MarkerDetectionObjects
	CommObject CommVisualTag {
		tagID : Int32
		/** in sensor coordinates */
		tagPose : CommPose3d		
		
		base_state : CommBaseState
		sensor_pose: CommPose3d	
	}
	
	CommObject CommDetectedTags {
		tags : CommVisualTag [*]
		valid : Boolean = false
	}
	
}
